#!/usr/bin/env bash

### ### SHA RC ### ###

echo "sourcing ${BASH_SOURCE[0]}"

SharcDir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
if [ -z "$SourceHierarchy" ]
then 
    for Source in ${BASH_SOURCE[@]}
    do
        SourceHierarchy="$Source $SourceHierarchy"
    done
fi

AliasDir="$SharcDir/.nestedrc"
StateDir="$SharcDir/.state"
if [ -z "$MainRC" ]
then
    MainRC=$(echo "$SourceHierarchy" | cut -d' ' -f 1) #~/.bashrc
fi

###set some useful variables
NormalColor=$(tput sgr0)
AlertColor=$(tput rev)

PrefixRegexForFunctions="^\s*function\s\+"
PrefixRegexForAliases="^\s*alias\s\+"
PrefixRegexForComments="^\s*###"

function _error_echo() {
    (>&2 echo -e "${AlertColor}$@${NormalColor}")
}

function _unpack_nested_aliases() {
    local AliasList
    local NestedDirs
    NestedDirs=$(find $AliasDir -type d)
    for NestedDir in $NestedDirs
    do
        #odd looking so it stays system agnostic:
        AliasList="$AliasList $(ls -laF "$NestedDir" | tail -n +2 | grep -v / | awk -v RootDir=$NestedDir/ '{print RootDir $NF}')"
    done
    echo "$AliasList" | sed 's/[^ ]*\.swp/ /g'
}

function _source_all() {
    local RetVal
    for SourceFile in $@
    do
        echo sourcing $SourceFile
        source $SourceFile
        RetVal=$?
        if [ $RetVal -ne 0 ]
        then
            _error_echo "Error ($RetVal) sourcing $SourceFile"
        fi
    done
}

function _get_all_aliases() {
    echo "${SourceHierarchy} $(_unpack_nested_aliases)" | sed 's/[^ ]*\.swp/ /g'
}

###SHARC cD into
alias sharcd="cd $SharcDir"

###SHARC State cd into
alias sharcs='cd $StateDir'

###Export SHARC tar file
function xsharc() {
    local BaseName
    BaseName="$(basename "${SharcDir}")"
    tar -cvf "/tmp/$BaseName.tar" -C ~ $BaseName
    _error_echo -e "\nExporting ${SharcDir} to /tmp/$BaseName.tar\n"
}

###Edit SHARC
function esharc() {
    local SearchList
    SearchList=$(_get_all_aliases)
    if [ -z $1 ]
    then
        vim +:ls $SearchList
    else 
        local SearchTerm
        SearchTerm="${PrefixRegexForFunctions}$1\|${PrefixRegexForAliases}$1"
        local SearchResults
        SearchResults=$(grep -l $SearchTerm $SearchList)
        if [ -n "$SearchResults" ]
        then
            vim +/$SearchTerm $SearchResults
        else
            _error_echo "No Results Found For $1"
        fi
    fi
    source $MainRC
}
complete -A function -A alias esharc

###GRep SHARC
function grsharc() {
    if [ $# -eq 0 ]
    then
        _error_echo Error. Need more arguments.
    fi
    grep $@ $(_get_all_aliases)
}

###Summarize sHARC
function sharc() {
    local SearchTerm
    local SearchList
    SearchTerm="${PrefixRegexForFunctions}[A-Za-z][^(]\+\|${PrefixRegexForAliases}[A-Za-z][^=]*\|${PrefixRegexForComments}.*$"
    SearchList=$(_get_all_aliases)
    grep -ho "$SearchTerm" $SearchList | sed 's/function/    /g' | sed 's/alias/    /g'
}

_source_all $(_unpack_nested_aliases)

